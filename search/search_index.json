{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Welcome to Async Caches! Async Caches was created to provide familiar caching solution to Django developers making a switch to new async frameworks, but newcomers are also welcome! Its fully async and ships with type hints and docstrings for public API. It also has 100% test coverage. Requirements: Python 3.6+ Installation Async Caches can be installed form Pypi: $ pip install async-caches Credits and license This is free software and you are welcome to modify and redistribute it under the conditions described in the license. For the complete license, refer to the LICENSE file. Parts of software come from databases package developed by Tom Christie and contributors and from Django package developed by Django project maintainers and contributors.","title":"Introduction"},{"location":"#introduction","text":"Welcome to Async Caches! Async Caches was created to provide familiar caching solution to Django developers making a switch to new async frameworks, but newcomers are also welcome! Its fully async and ships with type hints and docstrings for public API. It also has 100% test coverage. Requirements: Python 3.6+","title":"Introduction"},{"location":"#installation","text":"Async Caches can be installed form Pypi: $ pip install async-caches","title":"Installation"},{"location":"#credits-and-license","text":"This is free software and you are welcome to modify and redistribute it under the conditions described in the license. For the complete license, refer to the LICENSE file. Parts of software come from databases package developed by Tom Christie and contributors and from Django package developed by Django project maintainers and contributors.","title":"Credits and license"},{"location":"api/","text":"API reference get await cache . get ( key : str , default : Any = None , * , version : Optional [ Version ] = None ) Required arguments key String with cache key to read. Optional arguments default Default value that should be returned if key doesn't exist in the cache, or has expired. Defaults to None . version Version of key that should be returned. String or integer. Defaults to None , unless default version for set for the cache.","title":"API"},{"location":"api/#api-reference","text":"","title":"API reference"},{"location":"api/#get","text":"await cache . get ( key : str , default : Any = None , * , version : Optional [ Version ] = None )","title":"get"},{"location":"api/#required-arguments","text":"","title":"Required arguments"},{"location":"api/#key","text":"String with cache key to read.","title":"key"},{"location":"api/#optional-arguments","text":"","title":"Optional arguments"},{"location":"api/#default","text":"Default value that should be returned if key doesn't exist in the cache, or has expired. Defaults to None .","title":"default"},{"location":"api/#version","text":"Version of key that should be returned. String or integer. Defaults to None , unless default version for set for the cache.","title":"version"},{"location":"backends/","text":"Backends Async Caches ships with three caching backends, each intended for different usage: Dummy cache Dummy cache backend that doesn't cache anything. Enables you to easily disable caching without having to litter your code with conditions and checks. It also checks if values passed to cache are JSON-serializable. from caches import Cache cache = Cache ( \"dummy://null\" ) Note: Because dummy backend has no configuration options, it doesn't matter what you'll write after the dummy:// part. Local memory cache Cache backend that stores data in local memory. Lets you develop and test caching without need for actual cache server. Its purged when application restarts, so you don't have to spend time invalidating caches when changing your app. This backend supports cache versions and timeouts. from caches import Cache cache = Cache ( \"locmem://null\" ) Redis This backend stores data on Redis server. This is only backend intended for actual use on production. It supports key prefixes, versions and timeouts. from caches import Cache # Connection to locally running Redis instance cache = Cache ( \"redis://localhost\" ) Connection To use cache, it has to be connected . After cache is no longer needed, it should be disconnected . Note: running event loop is required for cache to work. async def myapp (): cache = Cache ( \"redis://localhost\" ) await cache . connect () await cache . set ( \"test\" , \"Ok!\" ) await cache . disconnect () Alternatively, cache may be used as context manager: async def myapp (): async with Cache ( \"redis://localhost\" ) as cache : await cache . set ( \"test\" , \"Ok!\" ) Configuration Multiple instances All cache backends support running multiple cache instances: from caches import Cache # Multiple Redis instances default = Cache ( \"redis://localhost\" ) user_tracker = Cache ( \"redis://localhost/1\" ) # Multiple locmemory instances default = Cache ( \"locmem://default\" ) user_tracker = Cache ( \"locmem://users\" ) # Multiple dummy instances default = Cache ( \"dummy://default\" ) user_tracker = Cache ( \"dummy://users\" ) Setting options Options can be set either as elements of querystring in cache URL, or as extra kwargs passed to Cache : from caches import Cache # Option included in cache link... cache = Cache ( \"redis://localhost?timeout=600\" ) # ...and set as kwarg cache = Cache ( \"locmem://default\" , timeout = 600 ) Note: when option is set in both URL and kwarg, the URL value is discarded. Default timeout By default cache keys never expire, unless expiration time was explicitly set for a specific key. You can override this behaviour by setting default timeout (in seconds) for all keys on cache: from caches import Cache # Expire keys after 5 minutes. cache = Cache ( \"redis://localhost\" , timeout = 600 ) Default version By default cache keys are not versioned, unless version was specified during key set. You can default keys to specific version using version option: from caches import Cache # Version can be an integer... cache = Cache ( \"redis://localhost\" , version = 2019 ) # ...or a string cache = Cache ( \"redis://localhost\" , version = \"f6s8a68687as\" ) Default key prefix If your cache shares Redis database with other clients, you can prefix your cache keys with string specific to your client to reduce chance of key collision: from caches import Cache cache = Cache ( \"redis://localhost/0\" , key_prefix = \"forum\" ) Note: Clearing your cache by calling cache.clear() will remove all keys from cache, regardless of their prefix. Connections pool size Redis backend supports maxsize and minsize options that can be used to configure size of available connections pool used by the cache to communicate with the Redis server: from caches import Cache cache = Cache ( \"redis://localhost\" , minsize = 2 , maxsize = 5 ) Note: Redis backend defaults to 1 min. and 10 max. connections.","title":"Backends"},{"location":"backends/#backends","text":"Async Caches ships with three caching backends, each intended for different usage:","title":"Backends"},{"location":"backends/#dummy-cache","text":"Dummy cache backend that doesn't cache anything. Enables you to easily disable caching without having to litter your code with conditions and checks. It also checks if values passed to cache are JSON-serializable. from caches import Cache cache = Cache ( \"dummy://null\" ) Note: Because dummy backend has no configuration options, it doesn't matter what you'll write after the dummy:// part.","title":"Dummy cache"},{"location":"backends/#local-memory-cache","text":"Cache backend that stores data in local memory. Lets you develop and test caching without need for actual cache server. Its purged when application restarts, so you don't have to spend time invalidating caches when changing your app. This backend supports cache versions and timeouts. from caches import Cache cache = Cache ( \"locmem://null\" )","title":"Local memory cache"},{"location":"backends/#redis","text":"This backend stores data on Redis server. This is only backend intended for actual use on production. It supports key prefixes, versions and timeouts. from caches import Cache # Connection to locally running Redis instance cache = Cache ( \"redis://localhost\" )","title":"Redis"},{"location":"backends/#connection","text":"To use cache, it has to be connected . After cache is no longer needed, it should be disconnected . Note: running event loop is required for cache to work. async def myapp (): cache = Cache ( \"redis://localhost\" ) await cache . connect () await cache . set ( \"test\" , \"Ok!\" ) await cache . disconnect () Alternatively, cache may be used as context manager: async def myapp (): async with Cache ( \"redis://localhost\" ) as cache : await cache . set ( \"test\" , \"Ok!\" )","title":"Connection"},{"location":"backends/#configuration","text":"","title":"Configuration"},{"location":"backends/#multiple-instances","text":"All cache backends support running multiple cache instances: from caches import Cache # Multiple Redis instances default = Cache ( \"redis://localhost\" ) user_tracker = Cache ( \"redis://localhost/1\" ) # Multiple locmemory instances default = Cache ( \"locmem://default\" ) user_tracker = Cache ( \"locmem://users\" ) # Multiple dummy instances default = Cache ( \"dummy://default\" ) user_tracker = Cache ( \"dummy://users\" )","title":"Multiple instances"},{"location":"backends/#setting-options","text":"Options can be set either as elements of querystring in cache URL, or as extra kwargs passed to Cache : from caches import Cache # Option included in cache link... cache = Cache ( \"redis://localhost?timeout=600\" ) # ...and set as kwarg cache = Cache ( \"locmem://default\" , timeout = 600 ) Note: when option is set in both URL and kwarg, the URL value is discarded.","title":"Setting options"},{"location":"backends/#default-timeout","text":"By default cache keys never expire, unless expiration time was explicitly set for a specific key. You can override this behaviour by setting default timeout (in seconds) for all keys on cache: from caches import Cache # Expire keys after 5 minutes. cache = Cache ( \"redis://localhost\" , timeout = 600 )","title":"Default timeout"},{"location":"backends/#default-version","text":"By default cache keys are not versioned, unless version was specified during key set. You can default keys to specific version using version option: from caches import Cache # Version can be an integer... cache = Cache ( \"redis://localhost\" , version = 2019 ) # ...or a string cache = Cache ( \"redis://localhost\" , version = \"f6s8a68687as\" )","title":"Default version"},{"location":"backends/#default-key-prefix","text":"If your cache shares Redis database with other clients, you can prefix your cache keys with string specific to your client to reduce chance of key collision: from caches import Cache cache = Cache ( \"redis://localhost/0\" , key_prefix = \"forum\" ) Note: Clearing your cache by calling cache.clear() will remove all keys from cache, regardless of their prefix.","title":"Default key prefix"},{"location":"backends/#connections-pool-size","text":"Redis backend supports maxsize and minsize options that can be used to configure size of available connections pool used by the cache to communicate with the Redis server: from caches import Cache cache = Cache ( \"redis://localhost\" , minsize = 2 , maxsize = 5 ) Note: Redis backend defaults to 1 min. and 10 max. connections.","title":"Connections pool size"}]}