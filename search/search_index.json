{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Welcome to Async Caches! Async Caches was created to provide familiar caching solution to Django developers making a switch to new async frameworks, but newcomers are also welcome! Its fully async and ships with type hints and docstrings for public API. It also has 100% test coverage. Requirements: Python 3.6+ Installation Async Caches can be installed form Pypi: $ pip install async-caches Credits and license This is free software and you are welcome to modify and redistribute it under the conditions described in the license. For the complete license, refer to the LICENSE file. Parts of software come from databases package developed by Tom Christie and contributors and from Django package developed by Django project maintainers and contributors.","title":"Introduction"},{"location":"#introduction","text":"Welcome to Async Caches! Async Caches was created to provide familiar caching solution to Django developers making a switch to new async frameworks, but newcomers are also welcome! Its fully async and ships with type hints and docstrings for public API. It also has 100% test coverage. Requirements: Python 3.6+","title":"Introduction"},{"location":"#installation","text":"Async Caches can be installed form Pypi: $ pip install async-caches","title":"Installation"},{"location":"#credits-and-license","text":"This is free software and you are welcome to modify and redistribute it under the conditions described in the license. For the complete license, refer to the LICENSE file. Parts of software come from databases package developed by Tom Christie and contributors and from Django package developed by Django project maintainers and contributors.","title":"Credits and license"},{"location":"api/","text":"API reference Cache connect await cache . connect () Connects cache to server. disconnect await cache . disconnect () Disconnects cache from server. get await cache . get ( key : str , default : Any = None , * , version : Optional [ Version ] = None ) -> Any Gets value for key from the cache. Required arguments key String with cache key to read. Optional arguments default Default value that should be returned if key doesn't exist in the cache, or has expired. Defaults to None . version Version of key that should be returned. String or integer. Defaults to None , unless default version is set for the cache. set await cache . set ( key : str , value : Serializable , * , timeout : Optional [ int ] = None , version : Optional [ Version ] = None ) Sets new value for key in the cache. If key doesn't exist it will be created. Required arguments key String with cache key to set. value JSON-serializable value to store in the cache. Optional arguments timeout Integer with number of seconds after which set key will expire and will be removed by the cache. Defaults to None (cache forever), unless default timeout is set for cache. version Version of key that should be set. String or integer. Defaults to None , unless default version is set for the cache. add await cache . add ( key : str , value : Serializable , * , timeout : Optional [ int ] = None , version : Optional [ Version ] = None ) Sets key in the cache if it doesn't already exist, or has expired. Required arguments key String with cache key to set. value JSON-serializable value to store in the cache. Optional arguments timeout Integer with number of seconds after which set key will expire and will be removed by the cache. Defaults to None (cache forever), unless default timeout is set for cache. version Version of key that should be set. String or integer. Defaults to None , unless default version is set for the cache. get_or_set await cache . get_or_set ( key : str , default : Serializable , * , timeout : Optional [ int ] = None , version : Optional [ Version ] = None ) -> Any Gets value for key from the cache. If key doesn't exist or has expired, new key is set with default value. Required arguments key String with cache key to read or set. default Default value that should be returned if key doesn't exist in the cache, or has expired. It has to be JSON-serializable and will be set in cache if read didn't return the value. If default is callable, it will be called and it's return value will be set in cache. Optional arguments timeout Integer with number of seconds after which set key will expire and will be removed by the cache. Defaults to None (cache forever), unless default timeout is set for cache. version Version of key that should be get (or set). String or integer. Defaults to None , unless default version is set for the cache. get_many await cache . get_many ( keys : Iterable [ str ], version : Optional [ Version ] = None ) -> Dict [ str , Any ] Gets values for many keys from the cache in single read operation. Required arguments keys List or tuple of string with cache keys to read. Optional arguments version Version of keys that should be get from the cache. String or integer. Defaults to None , unless default version is set for the cache. Return value Returns dict of cache-returned values. If any of keys didn't exist in the cache or was expired, it's value will be as None . set_many await cache . set_many ( mapping : Mapping [ str , Serializable ], * , timeout : Optional [ int ] = None ) Sets values for many keys in the cache in single write operation. Note: if timeout argument is provided, second command will be ran to set keys expiration time on the cache server. delete await cache . delete ( key : str , version : Optional [ Version ] = None ) Deletes the key from the cache. Does nothing if the key doesn't exist. Required arguments key Key to delete from cache. Optional arguments version Version of key that should be deleted from the cache. String or integer. Defaults to None , unless default version is set for the cache. delete_many await cache . delete_many ( keys : Iterable [ str ], version : Optional [ Version ] = None ) Deletes many keys from the cache. Skips keys that don't exist. Required arguments keys Keys to delete from cache. Optional arguments version Version of keys that should be deleted from the cache. String or integer. Defaults to None , unless default version is set for the cache. clear await cache . clear () Deletes all keys from the cache. Note: cache.clear() will remove all keys from cache, not just ones set by your application. Be careful when calling it, if your app shares Redis database with other clients. touch await cache . touch ( key : str , timeout : Optional [ int ] = None , * , version : Optional [ Version ] = None ) -> bool Updates expiration time for the key. Required arguments key String with cache key which timeout value should be updated. Optional arguments timeout Integer with number of seconds after which updated key will expire and will be removed by the cache, or None if key should never expire. Defaults to None (cache forever), unless default timeout is set for cache. version Version of key that should be updated. String or integer. Defaults to None , unless default version is set for the cache. Return value Returns True if key's expirat was updated, and False if key didn't exist in the cache. incr await cache . incr ( key : str , delta : Union [ float , int ] = 1 , * , version : Optional [ Version ] = None ) -> Union [ float , int ] Increases the value stored for specified key by specified amount. Required arguments key String with cache key which should be updated. Optional arguments delta Amount by which key value should be increased. Can be float or int . Defaults to 1 . version Version of key that should be updated. String or integer. Defaults to None , unless default version is set for the cache. Return value Returns float or int with updated value. If key didn't exist, this value will equal to value passed in delta argument. decr await cache . decr ( key : str , delta : Union [ float , int ] = 1 , * , version : Optional [ Version ] = None ) -> Union [ float , int ] Decreases the value stored for specified key by specified amount. Required arguments key String with cache key which should be updated. Optional arguments delta Amount by which key value should be decreased. Can be float or int . Defaults to 1 . version Version of key that should be updated. String or integer. Defaults to None , unless default version is set for the cache. Return value Returns float or int with updated value. If key didn't exist, this value will equal to value passed in delta argument.","title":"API"},{"location":"api/#api-reference","text":"","title":"API reference"},{"location":"api/#cache","text":"","title":"Cache"},{"location":"api/#connect","text":"await cache . connect () Connects cache to server.","title":"connect"},{"location":"api/#disconnect","text":"await cache . disconnect () Disconnects cache from server.","title":"disconnect"},{"location":"api/#get","text":"await cache . get ( key : str , default : Any = None , * , version : Optional [ Version ] = None ) -> Any Gets value for key from the cache.","title":"get"},{"location":"api/#required-arguments","text":"","title":"Required arguments"},{"location":"api/#key","text":"String with cache key to read.","title":"key"},{"location":"api/#optional-arguments","text":"","title":"Optional arguments"},{"location":"api/#default","text":"Default value that should be returned if key doesn't exist in the cache, or has expired. Defaults to None .","title":"default"},{"location":"api/#version","text":"Version of key that should be returned. String or integer. Defaults to None , unless default version is set for the cache.","title":"version"},{"location":"api/#set","text":"await cache . set ( key : str , value : Serializable , * , timeout : Optional [ int ] = None , version : Optional [ Version ] = None ) Sets new value for key in the cache. If key doesn't exist it will be created.","title":"set"},{"location":"api/#required-arguments_1","text":"","title":"Required arguments"},{"location":"api/#key_1","text":"String with cache key to set.","title":"key"},{"location":"api/#value","text":"JSON-serializable value to store in the cache.","title":"value"},{"location":"api/#optional-arguments_1","text":"","title":"Optional arguments"},{"location":"api/#timeout","text":"Integer with number of seconds after which set key will expire and will be removed by the cache. Defaults to None (cache forever), unless default timeout is set for cache.","title":"timeout"},{"location":"api/#version_1","text":"Version of key that should be set. String or integer. Defaults to None , unless default version is set for the cache.","title":"version"},{"location":"api/#add","text":"await cache . add ( key : str , value : Serializable , * , timeout : Optional [ int ] = None , version : Optional [ Version ] = None ) Sets key in the cache if it doesn't already exist, or has expired.","title":"add"},{"location":"api/#required-arguments_2","text":"","title":"Required arguments"},{"location":"api/#key_2","text":"String with cache key to set.","title":"key"},{"location":"api/#value_1","text":"JSON-serializable value to store in the cache.","title":"value"},{"location":"api/#optional-arguments_2","text":"","title":"Optional arguments"},{"location":"api/#timeout_1","text":"Integer with number of seconds after which set key will expire and will be removed by the cache. Defaults to None (cache forever), unless default timeout is set for cache.","title":"timeout"},{"location":"api/#version_2","text":"Version of key that should be set. String or integer. Defaults to None , unless default version is set for the cache.","title":"version"},{"location":"api/#get_or_set","text":"await cache . get_or_set ( key : str , default : Serializable , * , timeout : Optional [ int ] = None , version : Optional [ Version ] = None ) -> Any Gets value for key from the cache. If key doesn't exist or has expired, new key is set with default value.","title":"get_or_set"},{"location":"api/#required-arguments_3","text":"","title":"Required arguments"},{"location":"api/#key_3","text":"String with cache key to read or set.","title":"key"},{"location":"api/#default_1","text":"Default value that should be returned if key doesn't exist in the cache, or has expired. It has to be JSON-serializable and will be set in cache if read didn't return the value. If default is callable, it will be called and it's return value will be set in cache.","title":"default"},{"location":"api/#optional-arguments_3","text":"","title":"Optional arguments"},{"location":"api/#timeout_2","text":"Integer with number of seconds after which set key will expire and will be removed by the cache. Defaults to None (cache forever), unless default timeout is set for cache.","title":"timeout"},{"location":"api/#version_3","text":"Version of key that should be get (or set). String or integer. Defaults to None , unless default version is set for the cache.","title":"version"},{"location":"api/#get_many","text":"await cache . get_many ( keys : Iterable [ str ], version : Optional [ Version ] = None ) -> Dict [ str , Any ] Gets values for many keys from the cache in single read operation.","title":"get_many"},{"location":"api/#required-arguments_4","text":"","title":"Required arguments"},{"location":"api/#keys","text":"List or tuple of string with cache keys to read.","title":"keys"},{"location":"api/#optional-arguments_4","text":"","title":"Optional arguments"},{"location":"api/#version_4","text":"Version of keys that should be get from the cache. String or integer. Defaults to None , unless default version is set for the cache.","title":"version"},{"location":"api/#return-value","text":"Returns dict of cache-returned values. If any of keys didn't exist in the cache or was expired, it's value will be as None .","title":"Return value"},{"location":"api/#set_many","text":"await cache . set_many ( mapping : Mapping [ str , Serializable ], * , timeout : Optional [ int ] = None ) Sets values for many keys in the cache in single write operation. Note: if timeout argument is provided, second command will be ran to set keys expiration time on the cache server.","title":"set_many"},{"location":"api/#delete","text":"await cache . delete ( key : str , version : Optional [ Version ] = None ) Deletes the key from the cache. Does nothing if the key doesn't exist.","title":"delete"},{"location":"api/#required-arguments_5","text":"","title":"Required arguments"},{"location":"api/#key_4","text":"Key to delete from cache.","title":"key"},{"location":"api/#optional-arguments_5","text":"","title":"Optional arguments"},{"location":"api/#version_5","text":"Version of key that should be deleted from the cache. String or integer. Defaults to None , unless default version is set for the cache.","title":"version"},{"location":"api/#delete_many","text":"await cache . delete_many ( keys : Iterable [ str ], version : Optional [ Version ] = None ) Deletes many keys from the cache. Skips keys that don't exist.","title":"delete_many"},{"location":"api/#required-arguments_6","text":"","title":"Required arguments"},{"location":"api/#keys_1","text":"Keys to delete from cache.","title":"keys"},{"location":"api/#optional-arguments_6","text":"","title":"Optional arguments"},{"location":"api/#version_6","text":"Version of keys that should be deleted from the cache. String or integer. Defaults to None , unless default version is set for the cache.","title":"version"},{"location":"api/#clear","text":"await cache . clear () Deletes all keys from the cache. Note: cache.clear() will remove all keys from cache, not just ones set by your application. Be careful when calling it, if your app shares Redis database with other clients.","title":"clear"},{"location":"api/#touch","text":"await cache . touch ( key : str , timeout : Optional [ int ] = None , * , version : Optional [ Version ] = None ) -> bool Updates expiration time for the key.","title":"touch"},{"location":"api/#required-arguments_7","text":"","title":"Required arguments"},{"location":"api/#key_5","text":"String with cache key which timeout value should be updated.","title":"key"},{"location":"api/#optional-arguments_7","text":"","title":"Optional arguments"},{"location":"api/#timeout_3","text":"Integer with number of seconds after which updated key will expire and will be removed by the cache, or None if key should never expire. Defaults to None (cache forever), unless default timeout is set for cache.","title":"timeout"},{"location":"api/#version_7","text":"Version of key that should be updated. String or integer. Defaults to None , unless default version is set for the cache.","title":"version"},{"location":"api/#return-value_1","text":"Returns True if key's expirat was updated, and False if key didn't exist in the cache.","title":"Return value"},{"location":"api/#incr","text":"await cache . incr ( key : str , delta : Union [ float , int ] = 1 , * , version : Optional [ Version ] = None ) -> Union [ float , int ] Increases the value stored for specified key by specified amount.","title":"incr"},{"location":"api/#required-arguments_8","text":"","title":"Required arguments"},{"location":"api/#key_6","text":"String with cache key which should be updated.","title":"key"},{"location":"api/#optional-arguments_8","text":"","title":"Optional arguments"},{"location":"api/#delta","text":"Amount by which key value should be increased. Can be float or int . Defaults to 1 .","title":"delta"},{"location":"api/#version_8","text":"Version of key that should be updated. String or integer. Defaults to None , unless default version is set for the cache.","title":"version"},{"location":"api/#return-value_2","text":"Returns float or int with updated value. If key didn't exist, this value will equal to value passed in delta argument.","title":"Return value"},{"location":"api/#decr","text":"await cache . decr ( key : str , delta : Union [ float , int ] = 1 , * , version : Optional [ Version ] = None ) -> Union [ float , int ] Decreases the value stored for specified key by specified amount.","title":"decr"},{"location":"api/#required-arguments_9","text":"","title":"Required arguments"},{"location":"api/#key_7","text":"String with cache key which should be updated.","title":"key"},{"location":"api/#optional-arguments_9","text":"","title":"Optional arguments"},{"location":"api/#delta_1","text":"Amount by which key value should be decreased. Can be float or int . Defaults to 1 .","title":"delta"},{"location":"api/#version_9","text":"Version of key that should be updated. String or integer. Defaults to None , unless default version is set for the cache.","title":"version"},{"location":"api/#return-value_3","text":"Returns float or int with updated value. If key didn't exist, this value will equal to value passed in delta argument.","title":"Return value"},{"location":"backends/","text":"Backends Async Caches ships with three caching backends, each intended for different usage: Dummy cache Dummy cache backend that doesn't cache anything. Enables you to easily disable caching without having to litter your code with conditions and checks. It also checks if values passed to cache are JSON-serializable. from caches import Cache cache = Cache ( \"dummy://null\" ) Note: Because dummy backend has no configuration options, it doesn't matter what you'll write after the dummy:// part. Local memory cache Cache backend that stores data in local memory. Lets you develop and test caching without need for actual cache server. Its purged when application restarts, so you don't have to spend time invalidating caches when changing your app. This backend supports cache versions and timeouts. from caches import Cache cache = Cache ( \"locmem://null\" ) Redis This backend stores data on Redis server. This is only backend intended for actual use on production. It supports key prefixes, versions and timeouts. from caches import Cache # Connection to locally running Redis instance cache = Cache ( \"redis://localhost\" ) Connection To use cache, it has to be connected . After cache is no longer needed, it should be disconnected . Note: running event loop is required for cache to work. async def myapp (): cache = Cache ( \"redis://localhost\" ) await cache . connect () await cache . set ( \"test\" , \"Ok!\" ) await cache . disconnect () Alternatively, cache may be used as context manager: async def myapp (): async with Cache ( \"redis://localhost\" ) as cache : await cache . set ( \"test\" , \"Ok!\" ) Configuration Multiple instances All cache backends support running multiple cache instances: from caches import Cache # Multiple Redis instances default = Cache ( \"redis://localhost\" ) user_tracker = Cache ( \"redis://localhost/1\" ) # Multiple locmemory instances default = Cache ( \"locmem://default\" ) user_tracker = Cache ( \"locmem://users\" ) # Multiple dummy instances default = Cache ( \"dummy://default\" ) user_tracker = Cache ( \"dummy://users\" ) Setting options Options can be set either as elements of querystring in cache URL, or as extra kwargs passed to Cache : from caches import Cache # Option included in cache link... cache = Cache ( \"redis://localhost?timeout=600\" ) # ...and set as kwarg cache = Cache ( \"locmem://default\" , timeout = 600 ) Note: when option is set in both URL and kwarg, the URL value is discarded. Default timeout By default cache keys never expire, unless expiration time was explicitly set for a specific key. You can override this behaviour by setting default timeout (in seconds) for all keys on cache: from caches import Cache # Expire keys after 5 minutes. cache = Cache ( \"redis://localhost\" , timeout = 600 ) Default version By default cache keys are not versioned, unless version was specified during key set. You can default keys to specific version using version option: from caches import Cache # Version can be an integer... cache = Cache ( \"redis://localhost\" , version = 2019 ) # ...or a string cache = Cache ( \"redis://localhost\" , version = \"f6s8a68687as\" ) Default key prefix If your cache shares Redis database with other clients, you can prefix your cache keys with string specific to your client to reduce chance of key collision: from caches import Cache cache = Cache ( \"redis://localhost/0\" , key_prefix = \"forum\" ) Note: Clearing your cache by calling cache.clear() will remove all keys from cache, regardless of their prefix. Connections pool size Redis backend supports maxsize and minsize options that can be used to configure size of available connections pool used by the cache to communicate with the Redis server: from caches import Cache cache = Cache ( \"redis://localhost\" , minsize = 2 , maxsize = 5 ) Note: Redis backend defaults to 1 min. and 10 max. connections.","title":"Backends"},{"location":"backends/#backends","text":"Async Caches ships with three caching backends, each intended for different usage:","title":"Backends"},{"location":"backends/#dummy-cache","text":"Dummy cache backend that doesn't cache anything. Enables you to easily disable caching without having to litter your code with conditions and checks. It also checks if values passed to cache are JSON-serializable. from caches import Cache cache = Cache ( \"dummy://null\" ) Note: Because dummy backend has no configuration options, it doesn't matter what you'll write after the dummy:// part.","title":"Dummy cache"},{"location":"backends/#local-memory-cache","text":"Cache backend that stores data in local memory. Lets you develop and test caching without need for actual cache server. Its purged when application restarts, so you don't have to spend time invalidating caches when changing your app. This backend supports cache versions and timeouts. from caches import Cache cache = Cache ( \"locmem://null\" )","title":"Local memory cache"},{"location":"backends/#redis","text":"This backend stores data on Redis server. This is only backend intended for actual use on production. It supports key prefixes, versions and timeouts. from caches import Cache # Connection to locally running Redis instance cache = Cache ( \"redis://localhost\" )","title":"Redis"},{"location":"backends/#connection","text":"To use cache, it has to be connected . After cache is no longer needed, it should be disconnected . Note: running event loop is required for cache to work. async def myapp (): cache = Cache ( \"redis://localhost\" ) await cache . connect () await cache . set ( \"test\" , \"Ok!\" ) await cache . disconnect () Alternatively, cache may be used as context manager: async def myapp (): async with Cache ( \"redis://localhost\" ) as cache : await cache . set ( \"test\" , \"Ok!\" )","title":"Connection"},{"location":"backends/#configuration","text":"","title":"Configuration"},{"location":"backends/#multiple-instances","text":"All cache backends support running multiple cache instances: from caches import Cache # Multiple Redis instances default = Cache ( \"redis://localhost\" ) user_tracker = Cache ( \"redis://localhost/1\" ) # Multiple locmemory instances default = Cache ( \"locmem://default\" ) user_tracker = Cache ( \"locmem://users\" ) # Multiple dummy instances default = Cache ( \"dummy://default\" ) user_tracker = Cache ( \"dummy://users\" )","title":"Multiple instances"},{"location":"backends/#setting-options","text":"Options can be set either as elements of querystring in cache URL, or as extra kwargs passed to Cache : from caches import Cache # Option included in cache link... cache = Cache ( \"redis://localhost?timeout=600\" ) # ...and set as kwarg cache = Cache ( \"locmem://default\" , timeout = 600 ) Note: when option is set in both URL and kwarg, the URL value is discarded.","title":"Setting options"},{"location":"backends/#default-timeout","text":"By default cache keys never expire, unless expiration time was explicitly set for a specific key. You can override this behaviour by setting default timeout (in seconds) for all keys on cache: from caches import Cache # Expire keys after 5 minutes. cache = Cache ( \"redis://localhost\" , timeout = 600 )","title":"Default timeout"},{"location":"backends/#default-version","text":"By default cache keys are not versioned, unless version was specified during key set. You can default keys to specific version using version option: from caches import Cache # Version can be an integer... cache = Cache ( \"redis://localhost\" , version = 2019 ) # ...or a string cache = Cache ( \"redis://localhost\" , version = \"f6s8a68687as\" )","title":"Default version"},{"location":"backends/#default-key-prefix","text":"If your cache shares Redis database with other clients, you can prefix your cache keys with string specific to your client to reduce chance of key collision: from caches import Cache cache = Cache ( \"redis://localhost/0\" , key_prefix = \"forum\" ) Note: Clearing your cache by calling cache.clear() will remove all keys from cache, regardless of their prefix.","title":"Default key prefix"},{"location":"backends/#connections-pool-size","text":"Redis backend supports maxsize and minsize options that can be used to configure size of available connections pool used by the cache to communicate with the Redis server: from caches import Cache cache = Cache ( \"redis://localhost\" , minsize = 2 , maxsize = 5 ) Note: Redis backend defaults to 1 min. and 10 max. connections.","title":"Connections pool size"}]}